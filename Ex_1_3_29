package algos;

/*************************************************************************
 *
 *  A generic queue, implemented using a *circular* linked list.
 *  (Exercise 1.3.29)
 *
 *  % java Ex_1_3_29 < tobe.txt
 *  to be or not to be (2 left on queue)
 *
 *************************************************************************/

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Scanner;

public class Ex_1_3_29<Item> implements Iterable<Item> {
    private Node last;
    private int N; // the size of linked list

    private class Node{
        Node next;
        Item item;
    }

    public Ex_1_3_29(){
        last = null;
    }

    public boolean isEmpty() {
        return last == null;
    }

    public int size(){
        return N;
    }

    /**
     * Return the item least recently added to the queue.
     * Throw an exception if the queue is empty.
     */
    public Item peek(){
        if(isEmpty()) throw new NoSuchElementException("Queue underflow!");
        return last.next.item;
    }

    /**
     * Add the item to the queue.
     */
    public void enqueue(Item item) {
        Node x = new Node();
        x.item = item;
        if (isEmpty())
            x.next = x;
        else
        {
            x.next = last.next;
            last.next = x;
        }
        last = x;
        N++;
    }

    /**
     * Remove and return the item on the queue least recently added.
     * Throw an exception if the queue is empty.
     */
    public Item dequeue() {
        if(isEmpty()) throw new NoSuchElementException("Queue underflow!");
        Item item = last.next.item;
        if(last.next == last){
            last = null;
        }else {
            last.next = last.next.next;
        }
        N--;
        return item;
    }

    public String toString(){
        StringBuilder sb = new StringBuilder();
        for (Item item: this){
            sb.append(item + " ");
        }
        return sb.toString();
    }

    /**
     * Return an iterator that iterates over the items on the queue in FIFO order.
     */
    public Iterator<Item> iterator(){
        return new ListIterator();
    }

    private class ListIterator implements Iterator<Item> {
        public int n = N;
        public Node current = last;

        public boolean hasNext() {
            return N > 0;
        }

        public Item next() {
            if (!hasNext()) throw new NoSuchElementException();
            Item item = current.next.item;
            current = current.next;
            N--;
            return item;
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }
    }

    public static void main(String[] args) {
        Ex_1_3_29<String> q = new Ex_1_3_29<String>();

        try {
            InputStream in = new FileInputStream(new File("/Users/user/algs4-data/tobe.txt"));
            Scanner scanner = new Scanner(in);
            while (scanner.hasNext()) {
                String item = scanner.next();
                if (!item.equals("-")) {
                    q.enqueue(item);
                } else if (!q.isEmpty())
                    System.out.print(q.dequeue() + " ");
            }
            System.out.println("(" + q.size() + " left on queue)");
        } catch (FileNotFoundException e) {
            System.out.println("File does not exist!");
        }
    }
}
